// <auto-generated />
using System;
using BicycleApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BicycleApp.Data.Migrations
{
    [DbContext(typeof(BicycleAppDbContext))]
    [Migration("20231205155930_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.BikeModelPart", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("BikeModelId")
                        .HasColumnType("int");

                    b.HasKey("PartId", "BikeModelId");

                    b.HasIndex("BikeModelId");

                    b.ToTable("BikeModelsParts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.BikeStandartModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of standart bike.");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("BikesStandartModels");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the comment");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the comment");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Description of the comment");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Title of the comment");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PartId");

                    b.ToTable("Comments", t =>
                        {
                            t.HasComment("Table of all comments for all parts in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2088),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2110),
                            Description = "Test Description",
                            PartId = 1,
                            Title = "Test Title"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.CompatiblePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("The name of the compatible part");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("Type of the part");

                    b.HasKey("Id");

                    b.ToTable("CompatableParts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Delivary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateDelivered")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the entry");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Additional info for the current delivary");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.Property<double>("QuantityDelivered")
                        .HasColumnType("float(2)")
                        .HasComment("Quantity delivered of the current part");

                    b.Property<int>("SuplierId")
                        .HasColumnType("int")
                        .HasComment("Id of the suplier for this delivary");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("SuplierId");

                    b.ToTable("Delivaries", t =>
                        {
                            t.HasComment("Table of all delivaries of all parts in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateDelivered = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2178),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2179),
                            Note = "text",
                            PartId = 1,
                            QuantityDelivered = 2.0,
                            SuplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateDelivered = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2181),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2182),
                            Note = "text2",
                            PartId = 4,
                            QuantityDelivered = 2.0,
                            SuplierId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateDelivered = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2184),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2185),
                            Note = "text2",
                            PartId = 7,
                            QuantityDelivered = 1.0,
                            SuplierId = 3
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entity");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of deletion of the entity");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the last update of the entity");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the department: Active/Inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the department");

                    b.HasKey("Id");

                    b.ToTable("Departments", t =>
                        {
                            t.HasComment("Table of all departments in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2245),
                            IsDeleted = false,
                            Name = "Administration"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2283),
                            IsDeleted = false,
                            Name = "Workshop"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImageClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the client");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the image");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url of the image");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ImagesClients", t =>
                        {
                            t.HasComment("Table with the location of all images of all clients in tha database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            ImageName = "image",
                            ImageUrl = "test"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImageEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the client");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the image");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url of the image");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ImagesEmployees", t =>
                        {
                            t.HasComment("Table with the location of all images of all employees in tha database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = "21003785-a275-4139-ae20-af6a6cf8fea8",
                            ImageName = "image",
                            ImageUrl = "test"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImagePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the image");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url of the image");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("ImagesParts", t =>
                        {
                            t.HasComment("Table with the location of all images of all parts in tha database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageName = "image",
                            ImageUrl = "test",
                            PartId = 1
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the client of this order");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the order");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the order");

                    b.Property<DateTime?>("DateFinish")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the completion of the order");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the order");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("All information of the ordered parts from the client, as a string");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the discoint");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The final amount of the order after discount and tax");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the order deleted: Yes/No");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount paid from this order");

                    b.Property<decimal>("SaleAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the order before discount and tax");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasComment("Id of the current status of the order");

                    b.Property<decimal>("UnpaidAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount not paid from this order");

                    b.Property<decimal>("VAT")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the VAT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("Table of all orders from clients in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2434),
                            Description = "",
                            Discount = 0m,
                            FinalAmount = 750.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 625.00m,
                            StatusId = 1,
                            UnpaidAmount = 750.00m,
                            VAT = 125.00m
                        },
                        new
                        {
                            Id = 2,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2440),
                            Description = "test2",
                            Discount = 0m,
                            FinalAmount = 850.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 725.00m,
                            StatusId = 1,
                            UnpaidAmount = 850.00m,
                            VAT = 125.00m
                        },
                        new
                        {
                            Id = 3,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2445),
                            Description = "test3",
                            Discount = 0m,
                            FinalAmount = 950.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 825.00m,
                            StatusId = 1,
                            UnpaidAmount = 750.00m,
                            VAT = 125.00m
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.OrderPartEmployee", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("Id of the order from the client");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.Property<string>("UniqueKeyForSerialNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Separate unique products by serial number in one order");

                    b.Property<DateTime?>("DatetimeAsigned")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of asigned task to the employee");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description of the task");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the emplyee asigned to this order");

                    b.Property<DateTime?>("EndDatetime")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of finish of the task from the employee");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the task: Completed/Not completed");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the part");

                    b.Property<decimal>("PartPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the part");

                    b.Property<double>("PartQuantity")
                        .HasColumnType("float(2)")
                        .HasComment("Quantity of the part");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasComment("Unique serial number of the order");

                    b.Property<DateTime?>("StartDatetime")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of start of the task from the employee");

                    b.HasKey("OrderId", "PartId", "UniqueKeyForSerialNumber");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PartId");

                    b.ToTable("OrdersPartsEmployees", t =>
                        {
                            t.HasComment("Table conecting all the parts in an order with the employee responsible for the mounting");
                        });

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            PartId = 1,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DatetimeAsigned = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2488),
                            Description = "test",
                            EmployeeId = "21003785-a275-4139-ae20-af6a6cf8fea8",
                            IsCompleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0,
                            SerialNumber = "BID12345678"
                        },
                        new
                        {
                            OrderId = 1,
                            PartId = 2,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DatetimeAsigned = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2493),
                            Description = "test",
                            EmployeeId = "17063948-8fdc-417e-8fb7-2ae6bf572f94",
                            IsCompleted = false,
                            PartName = "Wheel of the YearG",
                            PartPrice = 75.00m,
                            PartQuantity = 2.0,
                            SerialNumber = "BID12345678"
                        },
                        new
                        {
                            OrderId = 1,
                            PartId = 3,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DatetimeAsigned = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2496),
                            Description = "test",
                            EmployeeId = "6af8468c-63f1-4bf2-8f88-e24b3f7a8f91",
                            IsCompleted = false,
                            PartName = "Shift",
                            PartPrice = 250.00m,
                            PartQuantity = 2.0,
                            SerialNumber = "BID12345678"
                        },
                        new
                        {
                            OrderId = 2,
                            PartId = 1,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DatetimeAsigned = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2499),
                            Description = "test",
                            EmployeeId = "21003785-a275-4139-ae20-af6a6cf8fea8",
                            IsCompleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0,
                            SerialNumber = "BID12345679"
                        },
                        new
                        {
                            OrderId = 2,
                            PartId = 4,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            Description = "test",
                            EmployeeId = "17063948-8fdc-417e-8fb7-2ae6bf572f94",
                            IsCompleted = false,
                            PartName = "Wheel of the Year for road",
                            PartPrice = 75.00m,
                            PartQuantity = 2.0,
                            SerialNumber = "BID12345679"
                        },
                        new
                        {
                            OrderId = 2,
                            PartId = 12,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            Description = "test",
                            EmployeeId = "6af8468c-63f1-4bf2-8f88-e24b3f7a8f91",
                            IsCompleted = false,
                            PartName = "Shift",
                            PartPrice = 220.00m,
                            PartQuantity = 2.0,
                            SerialNumber = "BID12345679"
                        },
                        new
                        {
                            OrderId = 3,
                            PartId = 1,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            Description = "test",
                            IsCompleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 3,
                            PartId = 5,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            Description = "test",
                            IsCompleted = false,
                            PartName = "Wheel of the Year for montain",
                            PartPrice = 85.00m,
                            PartQuantity = 6.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 3,
                            PartId = 11,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            Description = "test",
                            IsCompleted = false,
                            PartName = "Road budget Shifts",
                            PartPrice = 290.00m,
                            PartQuantity = 4.0,
                            SerialNumber = "BID12345680"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Id of the category of the part");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry in tha database");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the entry from the database");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the last update of the entry in the database");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Full description of the part");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Discount for part");

                    b.Property<string>("Intend")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Intention of the part");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the part: Deleted/Not deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the part");

                    b.Property<string>("OEMNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Unique number of the part from the manifacturer");

                    b.Property<double>("Quantity")
                        .HasColumnType("float(2)")
                        .HasComment("Current quantity of the part in the database");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Sale price of the part before VAT");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("Type of the part");

                    b.Property<int>("VATCategoryId")
                        .HasColumnType("int")
                        .HasComment("Id of the current vat category of the part");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VATCategoryId");

                    b.ToTable("Parts", t =>
                        {
                            t.HasComment("Table of all the parts in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2582),
                            Description = "Best frame in the road!",
                            Discount = 0.00m,
                            Intend = "For road usage",
                            IsDeleted = false,
                            Name = "Frame Road",
                            OEMNumber = "oemtest1",
                            Quantity = 2.0,
                            SalePrice = 100.00m,
                            Type = 1,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2594),
                            Description = "Best frame in the montain",
                            Discount = 0.00m,
                            Intend = "For montain usage",
                            IsDeleted = false,
                            Name = "Frame Montain",
                            OEMNumber = "oemtest2",
                            Quantity = 4.0,
                            SalePrice = 90.00m,
                            Type = 2,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2600),
                            Description = "Best frame in the road for womens",
                            Discount = 0.00m,
                            Intend = "For road usage in women bikes",
                            IsDeleted = false,
                            Name = "Frame Road woman",
                            OEMNumber = "oemtest3",
                            Quantity = 3.0,
                            SalePrice = 80.00m,
                            Type = 3,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2620),
                            Description = "Best wheels ever!",
                            Discount = 0.00m,
                            Intend = "Best wheels for a road usage",
                            IsDeleted = false,
                            Name = "Wheel of the Year for road",
                            OEMNumber = "oemtest4",
                            Quantity = 50.0,
                            SalePrice = 75.00m,
                            Type = 1,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2625),
                            Description = "Best wheels for a montain!",
                            Discount = 0.00m,
                            Intend = "Best wheels for a montain usage",
                            IsDeleted = false,
                            Name = "Wheel of the Year for montain",
                            OEMNumber = "oemtest5",
                            Quantity = 40.0,
                            SalePrice = 85.00m,
                            Type = 2,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2641),
                            Description = "Best wheels for a road!",
                            Discount = 0.00m,
                            Intend = "Best seler for a road usage",
                            IsDeleted = false,
                            Name = "Road wheel best seler",
                            OEMNumber = "oemtest6",
                            Quantity = 50.0,
                            SalePrice = 65.00m,
                            Type = 3,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2646),
                            Description = "Worst shift - have only one!",
                            Discount = 0.00m,
                            Intend = "Base shift - have only one",
                            IsDeleted = false,
                            Name = "Shift",
                            OEMNumber = "oemtest7",
                            Quantity = 9.0,
                            SalePrice = 250.00m,
                            Type = 1,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2651),
                            Description = "Best shifts for a montain!",
                            Discount = 0.00m,
                            Intend = "Best shift for a montain usage",
                            IsDeleted = false,
                            Name = "Montain Shifts",
                            OEMNumber = "oemtest8",
                            Quantity = 19.0,
                            SalePrice = 350.00m,
                            Type = 2,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2658),
                            Description = "Best shifts for a road!",
                            Discount = 0.00m,
                            Intend = "Best shift for a road usage",
                            IsDeleted = false,
                            Name = "Road Shifts",
                            OEMNumber = "oemtest9",
                            Quantity = 29.0,
                            SalePrice = 400.00m,
                            Type = 3,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2665),
                            Description = "Better shifts for a road!",
                            Discount = 0.00m,
                            Intend = "Better shift for a road usage",
                            IsDeleted = false,
                            Name = "Road better Shifts",
                            OEMNumber = "oemtest10",
                            Quantity = 21.0,
                            SalePrice = 410.00m,
                            Type = 3,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2670),
                            Description = "Budget shifts for a road!",
                            Discount = 0.00m,
                            Intend = "Budget shift for a road usage",
                            IsDeleted = false,
                            Name = "Road budget Shifts",
                            OEMNumber = "oemtest11",
                            Quantity = 21.0,
                            SalePrice = 290.00m,
                            Type = 3,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2686),
                            Description = "Cheap standard shift!",
                            Discount = 0.00m,
                            Intend = "Cheap standard shift for a road usage",
                            IsDeleted = false,
                            Name = "Shift",
                            OEMNumber = "oemtest12",
                            Quantity = 9.0,
                            SalePrice = 220.00m,
                            Type = 1,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2691),
                            Description = "Budget shifts for a montain!",
                            Discount = 0.00m,
                            Intend = "Budget shift for a montain usage",
                            IsDeleted = false,
                            Name = "Montain Shifts",
                            OEMNumber = "oemtest13",
                            Quantity = 19.0,
                            SalePrice = 280.00m,
                            Type = 2,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2697),
                            Description = "Budget wheel ever!",
                            Discount = 0.00m,
                            Intend = "Budget wheel for a road usage",
                            IsDeleted = false,
                            Name = "Budget wheel for road",
                            OEMNumber = "oemtest14",
                            Quantity = 50.0,
                            SalePrice = 65.00m,
                            Type = 1,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2715),
                            Description = "Budget wheel for a montain!",
                            Discount = 0.00m,
                            Intend = "Budget wheel for a montain usage",
                            IsDeleted = false,
                            Name = "Budget wheel for a montain",
                            OEMNumber = "oemtest15",
                            Quantity = 40.0,
                            SalePrice = 75.00m,
                            Type = 2,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2720),
                            Description = "The cheapest wheel for a road!",
                            Discount = 0.00m,
                            Intend = "The cheapest wheel for a road usage",
                            IsDeleted = false,
                            Name = "The cheapest road wheel",
                            OEMNumber = "oemtest16",
                            Quantity = 50.0,
                            SalePrice = 55.00m,
                            Type = 3,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2726),
                            Description = "The best titanium wheel for a road!",
                            Discount = 0.00m,
                            Intend = "The best titanium wheel for a road usage",
                            IsDeleted = false,
                            Name = "Road titanium wheel",
                            OEMNumber = "oemtest17",
                            Quantity = 50.0,
                            SalePrice = 95.00m,
                            Type = 3,
                            VATCategoryId = 1
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the category");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the category");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the category");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url of the general image for this category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the category: Active/Inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the category");

                    b.HasKey("Id");

                    b.ToTable("PartCategories", t =>
                        {
                            t.HasComment("Table of all categories for a part in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2792),
                            ImageUrl = "test",
                            IsDeleted = false,
                            Name = "Frame"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2804),
                            ImageUrl = "test",
                            IsDeleted = false,
                            Name = "Wheel"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2807),
                            ImageUrl = "test",
                            IsDeleted = false,
                            Name = "Acsessories"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartInStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the entry");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the entry: Active/Inactive");

                    b.Property<string>("OemPartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unic number of the part");

                    b.Property<int?>("SuplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuplierId");

                    b.ToTable("PartsInStock");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3164),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3166),
                            IsDeleted = false,
                            OemPartNumber = "oemtest1"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3168),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3170),
                            IsDeleted = false,
                            OemPartNumber = "oemtest2"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3172),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3173),
                            IsDeleted = false,
                            OemPartNumber = "oemtest3"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3175),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3176),
                            IsDeleted = false,
                            OemPartNumber = "oemtest4"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3178),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3179),
                            IsDeleted = false,
                            OemPartNumber = "oemtest5"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3181),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3182),
                            IsDeleted = false,
                            OemPartNumber = "oemtest6"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3183),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3184),
                            IsDeleted = false,
                            OemPartNumber = "oemtest7"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3186),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3187),
                            IsDeleted = false,
                            OemPartNumber = "oemtest8"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3189),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3190),
                            IsDeleted = false,
                            OemPartNumber = "oemtest9"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3192),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3193),
                            IsDeleted = false,
                            OemPartNumber = "oemtest10"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3195),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3196),
                            IsDeleted = false,
                            OemPartNumber = "oemtest11"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3198),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3199),
                            IsDeleted = false,
                            OemPartNumber = "oemtest12"
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3201),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3202),
                            IsDeleted = false,
                            OemPartNumber = "oemtest13"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the entry");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the entry: Active/Inactive");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Additional info for the current order");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.Property<int?>("PartId1")
                        .HasColumnType("int");

                    b.Property<int>("QuantityDelivered")
                        .HasColumnType("int")
                        .HasComment("Quantity delivered of the current part");

                    b.Property<int>("SuplierId")
                        .HasColumnType("int")
                        .HasComment("Id of the suplier for this delivary");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("PartId1");

                    b.HasIndex("SuplierId");

                    b.ToTable("PartOrders", t =>
                        {
                            t.HasComment("Table of all orders of parts in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3244),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3245),
                            IsDeleted = false,
                            Note = "text",
                            PartId = 1,
                            QuantityDelivered = 2,
                            SuplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3248),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3249),
                            IsDeleted = false,
                            Note = "text2",
                            PartId = 4,
                            QuantityDelivered = 2,
                            SuplierId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3251),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3252),
                            IsDeleted = false,
                            Note = "text2",
                            PartId = 7,
                            QuantityDelivered = 1,
                            SuplierId = 3
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Rate", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part who has the client rated");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the client who has rated the current part");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("The last rating for the part given by the client");

                    b.HasKey("PartId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("Rates", t =>
                        {
                            t.HasComment("Table of all the ratings for all the part in the database");
                        });

                    b.HasData(
                        new
                        {
                            PartId = 1,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 1,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 4
                        },
                        new
                        {
                            PartId = 1,
                            ClientId = "17ce735d-6713-4d0a-8fcb-e4a71ee86f6f",
                            Rating = 3
                        },
                        new
                        {
                            PartId = 2,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 2,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 4
                        },
                        new
                        {
                            PartId = 3,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 6
                        },
                        new
                        {
                            PartId = 3,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 4
                        },
                        new
                        {
                            PartId = 4,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 4
                        },
                        new
                        {
                            PartId = 4,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 3
                        },
                        new
                        {
                            PartId = 5,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 3
                        },
                        new
                        {
                            PartId = 5,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 6
                        },
                        new
                        {
                            PartId = 6,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 6
                        },
                        new
                        {
                            PartId = 6,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 6
                        },
                        new
                        {
                            PartId = 7,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 6
                        },
                        new
                        {
                            PartId = 7,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 8,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 9,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 9,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 10,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 10,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 11,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 11,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 3
                        },
                        new
                        {
                            PartId = 12,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 12,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 4
                        },
                        new
                        {
                            PartId = 13,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 4
                        },
                        new
                        {
                            PartId = 13,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 14,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 3
                        },
                        new
                        {
                            PartId = 14,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 15,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 4
                        },
                        new
                        {
                            PartId = 15,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 4
                        },
                        new
                        {
                            PartId = 16,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 3
                        },
                        new
                        {
                            PartId = 16,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 5
                        },
                        new
                        {
                            PartId = 17,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 3
                        },
                        new
                        {
                            PartId = 17,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            Rating = 2
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the status");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the status");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the status");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("State of the status: Active/Inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The name of the status");

                    b.HasKey("Id");

                    b.ToTable("Statuses", t =>
                        {
                            t.HasComment("Table with all the statuses for the orders");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2958),
                            IsDeleted = false,
                            Name = "Pending approval"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2973),
                            IsDeleted = false,
                            Name = "Approved order"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2976),
                            IsDeleted = false,
                            Name = "Frame management"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2978),
                            IsDeleted = false,
                            Name = "Wheel management"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2980),
                            IsDeleted = false,
                            Name = "Shift management"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2983),
                            IsDeleted = false,
                            Name = "Quality control"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(2985),
                            IsDeleted = false,
                            Name = "Send order"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Suplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Main address of the suplier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The category name of the suplied part");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the main person for contact with the suplier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the entry");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Main email of the suplier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the entry: Active/Inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the firm");

                    b.Property<string>("PhoneNumeber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Main phone number of the supplier");

                    b.Property<string>("VATNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Unique VAT number of the suplier");

                    b.HasKey("Id");

                    b.ToTable("Supliers", t =>
                        {
                            t.HasComment("Table of all supliers in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Sofia, center",
                            CategoryName = "Frame",
                            ContactName = "Pesh Peshev",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3029),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3030),
                            Email = "text@test.bg",
                            IsDeleted = false,
                            Name = "X Ltd",
                            PhoneNumeber = "1234567890",
                            VATNumber = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Sofia, east",
                            CategoryName = "Wheel",
                            ContactName = "Pesho Peshev",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3034),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3036),
                            Email = "text2@test.bg",
                            IsDeleted = false,
                            Name = "XX Ltd",
                            PhoneNumeber = "1234567899",
                            VATNumber = "123456788"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sofia, west",
                            CategoryName = "Acsessories",
                            ContactName = "Ivan Peshev",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3039),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3040),
                            Email = "text3@test.bg",
                            IsDeleted = false,
                            Name = "XXX Ltd",
                            PhoneNumeber = "1234567897",
                            VATNumber = "123456787"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the town entry");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the town entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the town entry");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the town");

                    b.HasKey("Id");

                    b.ToTable("Towns", t =>
                        {
                            t.HasComment("Table of all towns registered in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3085),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3086),
                            IsDeleted = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3093),
                            IsDeleted = false,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3096),
                            IsDeleted = false,
                            Name = "Burgas"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.VATCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the category");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the category");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the last update of the category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the category: Active/Inactive");

                    b.Property<decimal>("VATPercent")
                        .HasColumnType("decimal(6,2)")
                        .HasComment("Current percent of the VAT for this category parts");

                    b.HasKey("Id");

                    b.ToTable("VATCategories", t =>
                        {
                            t.HasComment("Table of all vat categories in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3125),
                            DateUpdated = new DateTime(2023, 12, 5, 17, 59, 30, 424, DateTimeKind.Local).AddTicks(3127),
                            IsDeleted = false,
                            VATPercent = 20.00m
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the deposited money in this client account");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the account");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the account");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of account data");

                    b.Property<string>("DelivaryAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The default address of the client for deliveries");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The first name of the client");

                    b.Property<string>("IBAN")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("IBAN of the client");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the account: Active/Inactive");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The last name of the client");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TownId")
                        .HasColumnType("int")
                        .HasComment("The Id of the default town for this client");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Clients", t =>
                        {
                            t.HasComment("Table of all clients registered in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            AccessFailedCount = 0,
                            Balance = 1000.00m,
                            ConcurrencyStamp = "ea41c509-0bb5-4a09-a19e-61318f4dafa1",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 29, 896, DateTimeKind.Local).AddTicks(2903),
                            DelivaryAddress = "Mladost 1, bl 20",
                            Email = "client@test.bg",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IBAN = "BG0012345678910111212",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@TEST.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEFZ7LsSFPu02ygOY6v3jMDeV7xR/6G/0i94CMugGa1dm7laa3Jv81BFNGOnNFzX9DA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "CLIENT@TEST.BG",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "client@test.bg"
                        },
                        new
                        {
                            Id = "17ce735d-6713-4d0a-8fcb-e4a71ee86f6f",
                            AccessFailedCount = 0,
                            Balance = 50.00m,
                            ConcurrencyStamp = "970ec82d-54d4-41f0-aa84-ec00d0752864",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 29, 960, DateTimeKind.Local).AddTicks(511),
                            DelivaryAddress = "Mladost 1, bl 20",
                            Email = "joro@test.bg",
                            EmailConfirmed = false,
                            FirstName = "Georgi",
                            IBAN = "BG0012345678910111212",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "JORO@TEST.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEIhUuYPEw/haLQDTmh/BgZZzSJ+UO6FaKR0KuKzWVZLXV9g+tiQVcw2HEzGnDvieFQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JORO@TEST.BG",
                            TownId = 2,
                            TwoFactorEnabled = false,
                            UserName = "joro@test.bg"
                        },
                        new
                        {
                            Id = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            AccessFailedCount = 0,
                            Balance = 1246.00m,
                            ConcurrencyStamp = "75040776-a8d5-41f6-aa9b-e980882f64a4",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 26, DateTimeKind.Local).AddTicks(2987),
                            DelivaryAddress = "Mladost 1, bl 20",
                            Email = "powerranger@test.bg",
                            EmailConfirmed = false,
                            FirstName = "Dimityr",
                            IBAN = "BG0012345678910111212",
                            IsDeleted = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "POWERRANGER@TEST.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEPTDZakkGadrpvgGjwtviSoSUwI/2NWzpd+s9DgUub1sKfNqH/zLHJEJt63y2mvyiw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "POWERRANGER@TEST.BG",
                            TownId = 3,
                            TwoFactorEnabled = false,
                            UserName = "powerranger@test.bg"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the account");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2")
                        .HasComment("Date of hire of the employee");

                    b.Property<DateTime?>("DateOfLeave")
                        .HasColumnType("datetime2")
                        .HasComment("Date of termination of the employee");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of account data");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasComment("Id of the current department of the employee");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Email of the employee");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The first name of the employee");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the account: Active/Inactive");

                    b.Property<bool>("IsManeger")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The last name of the employee");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Phone number of the employee");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Current position of the employee in the company");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("Table of all employees registered in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = "406e8cf1-acaa-44a8-afec-585ff64bed34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b2af9c1-de47-48e3-8a45-9cf4b3f37963",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 99, DateTimeKind.Local).AddTicks(5684),
                            DateOfHire = new DateTime(2023, 12, 5, 17, 59, 30, 99, DateTimeKind.Local).AddTicks(5636),
                            DepartmentId = 1,
                            Email = "manager@b-free.com",
                            EmailConfirmed = false,
                            FirstName = "Kalin",
                            IsDeleted = false,
                            IsManeger = true,
                            LastName = "Kalinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELAY1G3JAQa1F6ddLhJVEwsmMfb2C3yaP9UZ8tIttdXs3kTHqHqLlE84iDvz7g7A1w==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Position = "manager",
                            SecurityStamp = "MANAGER@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "manager@b-free.com"
                        },
                        new
                        {
                            Id = "21003785-a275-4139-ae20-af6a6cf8fea8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d92232d8-c459-442e-94e8-dcadb07d79ed",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 167, DateTimeKind.Local).AddTicks(6882),
                            DateOfHire = new DateTime(2023, 12, 5, 17, 59, 30, 167, DateTimeKind.Local).AddTicks(6853),
                            DepartmentId = 2,
                            Email = "marinov@b-free.com",
                            EmailConfirmed = false,
                            FirstName = "Marin",
                            IsDeleted = false,
                            IsManeger = false,
                            LastName = "Marinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARINOV@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED5d4w8gkOYvK6soBM1baBCKleAq3fRobYcFjQBQAOHVhGxEsqaBhvSPW2X/WR+xGA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Position = "FrameWorker",
                            SecurityStamp = "MARINOV@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "marinov@b-free.com"
                        },
                        new
                        {
                            Id = "17063948-8fdc-417e-8fb7-2ae6bf572f94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7f0bcad-40db-4c56-bc84-34500572f28b",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 233, DateTimeKind.Local).AddTicks(1563),
                            DateOfHire = new DateTime(2023, 12, 5, 17, 59, 30, 233, DateTimeKind.Local).AddTicks(1536),
                            DepartmentId = 2,
                            Email = "todorov@b-free.com",
                            EmailConfirmed = false,
                            FirstName = "Todor",
                            IsDeleted = false,
                            IsManeger = false,
                            LastName = "Todorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "TODOROV@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJlAIenPhIFsYQbsMPe6BOU1cI6YiqzqLTKuzWjhQEHIE6FSr1C/mxEVItJlSslsdw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Position = "Wheelworker",
                            SecurityStamp = "TODOROV@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "todorov@b-free.com"
                        },
                        new
                        {
                            Id = "6af8468c-63f1-4bf2-8f88-e24b3f7a8f91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0abb04a6-8a3b-4b52-a24a-a1245a8b2d58",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 297, DateTimeKind.Local).AddTicks(4520),
                            DateOfHire = new DateTime(2023, 12, 5, 17, 59, 30, 297, DateTimeKind.Local).AddTicks(4506),
                            DepartmentId = 2,
                            Email = "ivanov@b-free.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IsDeleted = false,
                            IsManeger = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOV@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGRdn3V8XvghvEqG/agivnm3x1YT99Q2C38eyAHmMdLzz2ZRqOkWQNaGZGAupHaLsA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Position = "Accessoriesworker",
                            SecurityStamp = "IVANOV@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "ivanov@b-free.com"
                        },
                        new
                        {
                            Id = "29f06920-d2ad-43d8-b362-e2b94d7a7502",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea1fc913-1f4a-44e7-bea0-eaf0562fd45f",
                            DateCreated = new DateTime(2023, 12, 5, 17, 59, 30, 359, DateTimeKind.Local).AddTicks(4680),
                            DateOfHire = new DateTime(2023, 12, 5, 17, 59, 30, 359, DateTimeKind.Local).AddTicks(4596),
                            DepartmentId = 2,
                            Email = "atanasov@b-free.com",
                            EmailConfirmed = false,
                            FirstName = "Atanas",
                            IsDeleted = false,
                            IsManeger = false,
                            LastName = "Atanasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ATANASOV@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIkyMwR5PEWBZ7ytoxmPlqyyE5MzmCP3mqH9y+SSre0IuMsG+19mRfuZp7yXzNDMrg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Position = "Qualitycontrol",
                            SecurityStamp = "ATANASOV@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "atanasov@b-free.com"
                        });
                });

            modelBuilder.Entity("CompatiblePartPart", b =>
                {
                    b.Property<int>("CompatablePartsId")
                        .HasColumnType("int");

                    b.Property<int>("PartsId")
                        .HasColumnType("int");

                    b.HasKey("CompatablePartsId", "PartsId");

                    b.HasIndex("PartsId");

                    b.ToTable("CompatiblePartPart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.BikeModelPart", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.BikeStandartModel", "BikeModel")
                        .WithMany("BikeModelsParts")
                        .HasForeignKey("BikeModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("BikeModelsParts")
                        .HasForeignKey("BikeModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BikeModel");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Comment", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Client", "Client")
                        .WithMany("Comments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("Comments")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Delivary", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("Delivaries")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Suplier", "Suplier")
                        .WithMany("Delivaries")
                        .HasForeignKey("SuplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Suplier");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImageClient", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Client", "Client")
                        .WithMany("Images")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImageEmployee", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", "Employee")
                        .WithMany("ImagesEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImagePart", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("ImagesParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Order", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.OrderPartEmployee", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", "Employee")
                        .WithMany("OrdersPartsEmployees")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Order", "Order")
                        .WithMany("OrdersPartsEmployees")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("OrdersPartsEmployees")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Order");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Part", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.PartCategory", "Category")
                        .WithMany("Parts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.VATCategory", "VATCategory")
                        .WithMany("Parts")
                        .HasForeignKey("VATCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("VATCategory");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartInStock", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Suplier", null)
                        .WithMany("PartsInStock")
                        .HasForeignKey("SuplierId");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartOrder", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", null)
                        .WithMany("PartsInOrder")
                        .HasForeignKey("PartId1");

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Suplier", "Suplier")
                        .WithMany("PartsInOrder")
                        .HasForeignKey("SuplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Suplier");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Rate", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Client", "Client")
                        .WithMany("Rates")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("Rates")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Client", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Town", "Town")
                        .WithMany("Clients")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Employee", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CompatiblePartPart", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.CompatiblePart", null)
                        .WithMany()
                        .HasForeignKey("CompatablePartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", null)
                        .WithMany()
                        .HasForeignKey("PartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.BikeStandartModel", b =>
                {
                    b.Navigation("BikeModelsParts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Order", b =>
                {
                    b.Navigation("OrdersPartsEmployees");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Part", b =>
                {
                    b.Navigation("BikeModelsParts");

                    b.Navigation("Comments");

                    b.Navigation("Delivaries");

                    b.Navigation("ImagesParts");

                    b.Navigation("OrdersPartsEmployees");

                    b.Navigation("PartsInOrder");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartCategory", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Status", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Suplier", b =>
                {
                    b.Navigation("Delivaries");

                    b.Navigation("PartsInOrder");

                    b.Navigation("PartsInStock");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Town", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.VATCategory", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Client", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Orders");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Employee", b =>
                {
                    b.Navigation("ImagesEmployees");

                    b.Navigation("OrdersPartsEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
