// <auto-generated />
using System;
using BicycleApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BicycleApp.Data.Migrations
{
    [DbContext(typeof(BicycleAppDbContext))]
    partial class BicycleAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.BikeModelPart", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("BikeModelId")
                        .HasColumnType("int");

                    b.HasKey("PartId", "BikeModelId");

                    b.HasIndex("BikeModelId");

                    b.ToTable("BikeModelsParts");

                    b.HasData(
                        new
                        {
                            PartId = 1,
                            BikeModelId = 1
                        },
                        new
                        {
                            PartId = 4,
                            BikeModelId = 1
                        },
                        new
                        {
                            PartId = 9,
                            BikeModelId = 1
                        },
                        new
                        {
                            PartId = 3,
                            BikeModelId = 2
                        },
                        new
                        {
                            PartId = 14,
                            BikeModelId = 2
                        },
                        new
                        {
                            PartId = 12,
                            BikeModelId = 2
                        },
                        new
                        {
                            PartId = 2,
                            BikeModelId = 3
                        },
                        new
                        {
                            PartId = 5,
                            BikeModelId = 3
                        },
                        new
                        {
                            PartId = 13,
                            BikeModelId = 3
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.BikeStandartModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entity");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of deletion of the entity");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the last update of the entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the department: Active/Inactive");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of standart bike.");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("BikesStandartModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Slow Initial Rendering: Since the data is fetched from the server before rendering, initial load times can be slow, resulting in a less-than-ideal user experience.",
                            ImageUrl = "https://yuchormanski.free.bg/bikes/bike-1.webp",
                            IsDeleted = false,
                            ModelName = "Bike 1",
                            Price = 575m
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Loading States: Users may experience an in-between or loading state, as they wait for the data to be rendered on the page.",
                            ImageUrl = "https://yuchormanski.free.bg/bikes/bike-2.webp",
                            IsDeleted = false,
                            ModelName = "Bike 2",
                            Price = 365m
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lack of Interactivity: There isn’t much opportunity for interactivity with the user until the data has been fully loaded and rendered on the page.",
                            ImageUrl = "https://yuchormanski.free.bg/bikes/bike-3.webp",
                            IsDeleted = false,
                            ModelName = "Bike 3",
                            Price = 455m
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entity");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of deletion of the entity");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the last update of the entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Description of the comment");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the department: Active/Inactive");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Title of the comment");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PartId");

                    b.ToTable("Comments", t =>
                        {
                            t.HasComment("Table of all comments for all parts in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6123),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6145),
                            Description = "Test Description",
                            IsDeleted = false,
                            PartId = 1,
                            Title = "Test Title"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.CompatablePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("The name of the compatible part");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("Type of the part");

                    b.HasKey("Id");

                    b.ToTable("CompatableParts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Delivary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of deletion of the entity");

                    b.Property<DateTime>("DateDelivered")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the entry");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the department: Active/Inactive");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Additional info for the current delivary");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.Property<double>("QuantityDelivered")
                        .HasColumnType("float(2)")
                        .HasComment("Quantity delivered of the current part");

                    b.Property<int>("SuplierId")
                        .HasColumnType("int")
                        .HasComment("Id of the suplier for this delivary");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("SuplierId");

                    b.ToTable("Delivaries", t =>
                        {
                            t.HasComment("Table of all delivaries of all parts in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateDelivered = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6199),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6200),
                            IsDeleted = false,
                            Note = "text",
                            PartId = 1,
                            QuantityDelivered = 2.0,
                            SuplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateDelivered = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6202),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6203),
                            IsDeleted = false,
                            Note = "text2",
                            PartId = 4,
                            QuantityDelivered = 2.0,
                            SuplierId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateDelivered = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6205),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6206),
                            IsDeleted = false,
                            Note = "text2",
                            PartId = 7,
                            QuantityDelivered = 1.0,
                            SuplierId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateDelivered = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6207),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6209),
                            IsDeleted = false,
                            Note = "text4",
                            PartId = 1,
                            QuantityDelivered = 4.0,
                            SuplierId = 1
                        },
                        new
                        {
                            Id = 5,
                            DateDelivered = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6210),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6211),
                            IsDeleted = false,
                            Note = "text5",
                            PartId = 4,
                            QuantityDelivered = 4.0,
                            SuplierId = 2
                        },
                        new
                        {
                            Id = 6,
                            DateDelivered = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6213),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6214),
                            IsDeleted = false,
                            Note = "text6",
                            PartId = 7,
                            QuantityDelivered = 2.0,
                            SuplierId = 3
                        },
                        new
                        {
                            Id = 7,
                            DateDelivered = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6216),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6217),
                            IsDeleted = false,
                            Note = "text7",
                            PartId = 1,
                            QuantityDelivered = 3.0,
                            SuplierId = 1
                        },
                        new
                        {
                            Id = 8,
                            DateDelivered = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6218),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6219),
                            IsDeleted = false,
                            Note = "text8",
                            PartId = 4,
                            QuantityDelivered = 5.0,
                            SuplierId = 2
                        },
                        new
                        {
                            Id = 9,
                            DateDelivered = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6221),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6222),
                            IsDeleted = false,
                            Note = "text9",
                            PartId = 7,
                            QuantityDelivered = 4.0,
                            SuplierId = 3
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entity");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of deletion of the entity");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the last update of the entity");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the department: Active/Inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the department");

                    b.HasKey("Id");

                    b.ToTable("Departments", t =>
                        {
                            t.HasComment("Table of all departments in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6286),
                            IsDeleted = false,
                            Name = "Administration"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6294),
                            IsDeleted = false,
                            Name = "Workshop"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImageClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the client");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the image");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url of the image");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ImagesClients", t =>
                        {
                            t.HasComment("Table with the location of all images of all clients in tha database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            ImageName = "image",
                            ImageUrl = "test"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImageEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the client");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the image");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url of the image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ImagesEmployees", t =>
                        {
                            t.HasComment("Table with the location of all images of all employees in tha database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = "21003785-a275-4139-ae20-af6a6cf8fea8",
                            ImageName = "image",
                            ImageUrl = "test",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImagePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entity");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of deletion of the entity");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the last update of the entity");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the image");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url of the image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the department: Active/Inactive");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("ImagesParts", t =>
                        {
                            t.HasComment("Table with the location of all images of all parts in tha database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "image",
                            ImageUrl = "test",
                            IsDeleted = false,
                            PartId = 1
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the client of this order");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the order");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the order");

                    b.Property<DateTime?>("DateFinish")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the completion of the order");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the order");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("All information of the ordered parts from the client, as a string");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the discoint");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The final amount of the order after discount and tax");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the order deleted: Yes/No");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount paid from this order");

                    b.Property<decimal>("SaleAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the order before discount and tax");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasComment("Id of the current status of the order");

                    b.Property<decimal>("UnpaidAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount not paid from this order");

                    b.Property<decimal>("VAT")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the VAT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("Table of all orders from clients in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6479),
                            Description = "",
                            Discount = 0m,
                            FinalAmount = 750.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 625.00m,
                            StatusId = 1,
                            UnpaidAmount = 750.00m,
                            VAT = 125.00m
                        },
                        new
                        {
                            Id = 2,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6574),
                            Description = "test2",
                            Discount = 0m,
                            FinalAmount = 850.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 725.00m,
                            StatusId = 1,
                            UnpaidAmount = 850.00m,
                            VAT = 125.00m
                        },
                        new
                        {
                            Id = 3,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6578),
                            Description = "test3",
                            Discount = 0m,
                            FinalAmount = 950.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 825.00m,
                            StatusId = 1,
                            UnpaidAmount = 750.00m,
                            VAT = 125.00m
                        },
                        new
                        {
                            Id = 4,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6581),
                            Description = "test4",
                            Discount = 0m,
                            FinalAmount = 650.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 525.00m,
                            StatusId = 1,
                            UnpaidAmount = 750.00m,
                            VAT = 125.00m
                        },
                        new
                        {
                            Id = 5,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6585),
                            Description = "test5",
                            Discount = 0m,
                            FinalAmount = 850.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 725.00m,
                            StatusId = 1,
                            UnpaidAmount = 850.00m,
                            VAT = 125.00m
                        },
                        new
                        {
                            Id = 6,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6590),
                            Description = "test6",
                            Discount = 0m,
                            FinalAmount = 850.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 525.00m,
                            StatusId = 1,
                            UnpaidAmount = 650.00m,
                            VAT = 125.00m
                        },
                        new
                        {
                            Id = 7,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6593),
                            Description = "test7",
                            Discount = 0m,
                            FinalAmount = 650.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 525.00m,
                            StatusId = 1,
                            UnpaidAmount = 750.00m,
                            VAT = 125.00m
                        },
                        new
                        {
                            Id = 8,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6597),
                            Description = "test8",
                            Discount = 0m,
                            FinalAmount = 850.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 725.00m,
                            StatusId = 1,
                            UnpaidAmount = 850.00m,
                            VAT = 125.00m
                        },
                        new
                        {
                            Id = 9,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6600),
                            Description = "test9",
                            Discount = 0m,
                            FinalAmount = 850.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 525.00m,
                            StatusId = 1,
                            UnpaidAmount = 650.00m,
                            VAT = 125.00m
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.OrderPartEmployee", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("Id of the order from the client");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.Property<string>("UniqueKeyForSerialNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Separate unique products by serial number in one order");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the order");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the order");

                    b.Property<DateTime?>("DateFinish")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the completion of the order");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the order");

                    b.Property<DateTime?>("DatetimeAsigned")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of asigned task to the employee");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description of the task");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the emplyee asigned to this order");

                    b.Property<DateTime?>("EndDatetime")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of finish of the task from the employee");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the task: Completed/Not completed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the order deleted: Yes/No");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the part");

                    b.Property<decimal>("PartPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the part");

                    b.Property<double>("PartQuantity")
                        .HasColumnType("float(2)")
                        .HasComment("Quantity of the part");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasComment("Unique serial number of the order");

                    b.Property<DateTime?>("StartDatetime")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of start of the task from the employee");

                    b.HasKey("OrderId", "PartId", "UniqueKeyForSerialNumber");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PartId");

                    b.ToTable("OrdersPartsEmployees", t =>
                        {
                            t.HasComment("Table conecting all the parts in an order with the employee responsible for the mounting");
                        });

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            PartId = 1,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatetimeAsigned = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6661),
                            Description = "test",
                            EmployeeId = "21003785-a275-4139-ae20-af6a6cf8fea8",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0,
                            SerialNumber = "BID12345678"
                        },
                        new
                        {
                            OrderId = 1,
                            PartId = 2,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatetimeAsigned = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6670),
                            Description = "test",
                            EmployeeId = "17063948-8fdc-417e-8fb7-2ae6bf572f94",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Wheel of the YearG",
                            PartPrice = 75.00m,
                            PartQuantity = 2.0,
                            SerialNumber = "BID12345678"
                        },
                        new
                        {
                            OrderId = 1,
                            PartId = 3,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatetimeAsigned = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6674),
                            Description = "test",
                            EmployeeId = "6af8468c-63f1-4bf2-8f88-e24b3f7a8f91",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Shift",
                            PartPrice = 250.00m,
                            PartQuantity = 2.0,
                            SerialNumber = "BID12345678"
                        },
                        new
                        {
                            OrderId = 2,
                            PartId = 1,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatetimeAsigned = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6676),
                            Description = "test",
                            EmployeeId = "21003785-a275-4139-ae20-af6a6cf8fea8",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0,
                            SerialNumber = "BID12345679"
                        },
                        new
                        {
                            OrderId = 2,
                            PartId = 4,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            EmployeeId = "17063948-8fdc-417e-8fb7-2ae6bf572f94",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Wheel of the Year for road",
                            PartPrice = 75.00m,
                            PartQuantity = 2.0,
                            SerialNumber = "BID12345679"
                        },
                        new
                        {
                            OrderId = 2,
                            PartId = 12,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            EmployeeId = "6af8468c-63f1-4bf2-8f88-e24b3f7a8f91",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Shift",
                            PartPrice = 220.00m,
                            PartQuantity = 2.0,
                            SerialNumber = "BID12345679"
                        },
                        new
                        {
                            OrderId = 3,
                            PartId = 1,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 3,
                            PartId = 5,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Wheel of the Year for montain",
                            PartPrice = 85.00m,
                            PartQuantity = 6.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 3,
                            PartId = 11,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Road budget Shifts",
                            PartPrice = 290.00m,
                            PartQuantity = 4.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 4,
                            PartId = 1,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 4,
                            PartId = 5,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Wheel of the Year for montain",
                            PartPrice = 85.00m,
                            PartQuantity = 6.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 4,
                            PartId = 11,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Road budget Shifts",
                            PartPrice = 290.00m,
                            PartQuantity = 4.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 5,
                            PartId = 1,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 5,
                            PartId = 5,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Wheel of the Year for montain",
                            PartPrice = 85.00m,
                            PartQuantity = 6.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 5,
                            PartId = 11,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Road budget Shifts",
                            PartPrice = 290.00m,
                            PartQuantity = 4.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 6,
                            PartId = 1,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 6,
                            PartId = 5,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Wheel of the Year for montain",
                            PartPrice = 85.00m,
                            PartQuantity = 6.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 6,
                            PartId = 11,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Road budget Shifts",
                            PartPrice = 290.00m,
                            PartQuantity = 4.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 7,
                            PartId = 1,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 7,
                            PartId = 5,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Wheel of the Year for montain",
                            PartPrice = 85.00m,
                            PartQuantity = 6.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 7,
                            PartId = 11,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Road budget Shifts",
                            PartPrice = 290.00m,
                            PartQuantity = 4.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 8,
                            PartId = 1,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 8,
                            PartId = 5,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Wheel of the Year for montain",
                            PartPrice = 85.00m,
                            PartQuantity = 6.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 8,
                            PartId = 11,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Road budget Shifts",
                            PartPrice = 290.00m,
                            PartQuantity = 4.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 9,
                            PartId = 1,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 9,
                            PartId = 5,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Wheel of the Year for montain",
                            PartPrice = 85.00m,
                            PartQuantity = 6.0,
                            SerialNumber = "BID12345680"
                        },
                        new
                        {
                            OrderId = 9,
                            PartId = 11,
                            UniqueKeyForSerialNumber = "7d47ca5c-ef3a-4bc0-a8af-f024464e27eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            IsCompleted = false,
                            IsDeleted = false,
                            PartName = "Road budget Shifts",
                            PartPrice = 290.00m,
                            PartQuantity = 4.0,
                            SerialNumber = "BID12345680"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.OrderPartEmployeeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Id of information for manufacturing part.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionForWorker")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Id of the order from the client");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("Id of the order from the client");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.Property<TimeSpan>("ProductionТime")
                        .HasColumnType("time")
                        .HasComment("Timespan for production on part.");

                    b.Property<string>("UniqueKeyForSerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Separate unique products by serial number in one order");

                    b.HasKey("Id");

                    b.HasIndex("OrderId", "PartId", "UniqueKeyForSerialNumber");

                    b.ToTable("OrdersPartsEmployeesInfos");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Id of the category of the part");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry in tha database");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the entry from the database");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the last update of the entry in the database");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Full description of the part");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Discount for part");

                    b.Property<string>("Intend")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Intention of the part");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the part: Deleted/Not deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the part");

                    b.Property<string>("OEMNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Unique number of the part from the manifacturer");

                    b.Property<double>("Quantity")
                        .HasColumnType("float(2)")
                        .HasComment("Current quantity of the part in the database");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Sale price of the part before VAT");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("Type of the part");

                    b.Property<int>("VATCategoryId")
                        .HasColumnType("int")
                        .HasComment("Id of the current vat category of the part");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VATCategoryId");

                    b.ToTable("Parts", t =>
                        {
                            t.HasComment("Table of all the parts in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6833),
                            Description = "Best frame in the road!",
                            Discount = 0.00m,
                            Intend = "For road usage",
                            IsDeleted = false,
                            Name = "Frame Road",
                            OEMNumber = "oemtest1",
                            Quantity = 2.0,
                            SalePrice = 100.00m,
                            Type = 1,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6848),
                            Description = "Best frame in the montain",
                            Discount = 0.00m,
                            Intend = "For montain usage",
                            IsDeleted = false,
                            Name = "Frame Montain",
                            OEMNumber = "oemtest2",
                            Quantity = 4.0,
                            SalePrice = 90.00m,
                            Type = 2,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6851),
                            Description = "Best frame in the road for womens",
                            Discount = 0.00m,
                            Intend = "For road usage in women bikes",
                            IsDeleted = false,
                            Name = "Frame Road woman",
                            OEMNumber = "oemtest3",
                            Quantity = 3.0,
                            SalePrice = 80.00m,
                            Type = 3,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6855),
                            Description = "Best wheels ever!",
                            Discount = 0.00m,
                            Intend = "Best wheels for a road usage",
                            IsDeleted = false,
                            Name = "Wheel of the Year for road",
                            OEMNumber = "oemtest4",
                            Quantity = 50.0,
                            SalePrice = 75.00m,
                            Type = 1,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6859),
                            Description = "Best wheels for a montain!",
                            Discount = 0.00m,
                            Intend = "Best wheels for a montain usage",
                            IsDeleted = false,
                            Name = "Wheel of the Year for montain",
                            OEMNumber = "oemtest5",
                            Quantity = 40.0,
                            SalePrice = 85.00m,
                            Type = 2,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6898),
                            Description = "Best wheels for a road!",
                            Discount = 0.00m,
                            Intend = "Best seler for a road usage",
                            IsDeleted = false,
                            Name = "Road wheel best seler",
                            OEMNumber = "oemtest6",
                            Quantity = 50.0,
                            SalePrice = 65.00m,
                            Type = 3,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6903),
                            Description = "Worst shift - have only one!",
                            Discount = 0.00m,
                            Intend = "Base shift - have only one",
                            IsDeleted = false,
                            Name = "Shift",
                            OEMNumber = "oemtest7",
                            Quantity = 9.0,
                            SalePrice = 250.00m,
                            Type = 1,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6906),
                            Description = "Best shifts for a montain!",
                            Discount = 0.00m,
                            Intend = "Best shift for a montain usage",
                            IsDeleted = false,
                            Name = "Montain Shifts",
                            OEMNumber = "oemtest8",
                            Quantity = 19.0,
                            SalePrice = 350.00m,
                            Type = 2,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6909),
                            Description = "Best shifts for a road!",
                            Discount = 0.00m,
                            Intend = "Best shift for a road usage",
                            IsDeleted = false,
                            Name = "Road Shifts",
                            OEMNumber = "oemtest9",
                            Quantity = 29.0,
                            SalePrice = 400.00m,
                            Type = 3,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6913),
                            Description = "Better shifts for a road!",
                            Discount = 0.00m,
                            Intend = "Better shift for a road usage",
                            IsDeleted = false,
                            Name = "Road better Shifts",
                            OEMNumber = "oemtest10",
                            Quantity = 21.0,
                            SalePrice = 410.00m,
                            Type = 3,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6917),
                            Description = "Budget shifts for a road!",
                            Discount = 0.00m,
                            Intend = "Budget shift for a road usage",
                            IsDeleted = false,
                            Name = "Road budget Shifts",
                            OEMNumber = "oemtest11",
                            Quantity = 21.0,
                            SalePrice = 290.00m,
                            Type = 3,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6920),
                            Description = "Cheap standard shift!",
                            Discount = 0.00m,
                            Intend = "Cheap standard shift for a road usage",
                            IsDeleted = false,
                            Name = "Shift",
                            OEMNumber = "oemtest12",
                            Quantity = 9.0,
                            SalePrice = 220.00m,
                            Type = 1,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6923),
                            Description = "Budget shifts for a montain!",
                            Discount = 0.00m,
                            Intend = "Budget shift for a montain usage",
                            IsDeleted = false,
                            Name = "Montain Shifts",
                            OEMNumber = "oemtest13",
                            Quantity = 19.0,
                            SalePrice = 280.00m,
                            Type = 2,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6926),
                            Description = "Budget wheel ever!",
                            Discount = 0.00m,
                            Intend = "Budget wheel for a road usage",
                            IsDeleted = false,
                            Name = "Budget wheel for road",
                            OEMNumber = "oemtest14",
                            Quantity = 50.0,
                            SalePrice = 65.00m,
                            Type = 1,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6930),
                            Description = "Budget wheel for a montain!",
                            Discount = 0.00m,
                            Intend = "Budget wheel for a montain usage",
                            IsDeleted = false,
                            Name = "Budget wheel for a montain",
                            OEMNumber = "oemtest15",
                            Quantity = 40.0,
                            SalePrice = 75.00m,
                            Type = 2,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6933),
                            Description = "The cheapest wheel for a road!",
                            Discount = 0.00m,
                            Intend = "The cheapest wheel for a road usage",
                            IsDeleted = false,
                            Name = "The cheapest road wheel",
                            OEMNumber = "oemtest16",
                            Quantity = 50.0,
                            SalePrice = 55.00m,
                            Type = 3,
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(6936),
                            Description = "The best titanium wheel for a road!",
                            Discount = 0.00m,
                            Intend = "The best titanium wheel for a road usage",
                            IsDeleted = false,
                            Name = "Road titanium wheel",
                            OEMNumber = "oemtest17",
                            Quantity = 50.0,
                            SalePrice = 95.00m,
                            Type = 3,
                            VATCategoryId = 1
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the category");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the category");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the category");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url of the general image for this category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the category: Active/Inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the category");

                    b.HasKey("Id");

                    b.ToTable("PartCategories", t =>
                        {
                            t.HasComment("Table of all categories for a part in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7018),
                            ImageUrl = "test",
                            IsDeleted = false,
                            Name = "Frame"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7025),
                            ImageUrl = "test",
                            IsDeleted = false,
                            Name = "Wheel"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7027),
                            ImageUrl = "test",
                            IsDeleted = false,
                            Name = "Acsessories"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartInStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the entry");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the entry: Active/Inactive");

                    b.Property<string>("OemPartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unic number of the part");

                    b.Property<int?>("SuplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuplierId");

                    b.ToTable("PartsInStock");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7380),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7382),
                            IsDeleted = false,
                            OemPartNumber = "oemtest1"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7385),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7386),
                            IsDeleted = false,
                            OemPartNumber = "oemtest2"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7388),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7389),
                            IsDeleted = false,
                            OemPartNumber = "oemtest3"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7390),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7391),
                            IsDeleted = false,
                            OemPartNumber = "oemtest4"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7393),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7394),
                            IsDeleted = false,
                            OemPartNumber = "oemtest5"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7395),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7396),
                            IsDeleted = false,
                            OemPartNumber = "oemtest6"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7398),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7399),
                            IsDeleted = false,
                            OemPartNumber = "oemtest7"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7401),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7402),
                            IsDeleted = false,
                            OemPartNumber = "oemtest8"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7403),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7404),
                            IsDeleted = false,
                            OemPartNumber = "oemtest9"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7407),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7408),
                            IsDeleted = false,
                            OemPartNumber = "oemtest10"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7409),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7410),
                            IsDeleted = false,
                            OemPartNumber = "oemtest11"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7417),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7418),
                            IsDeleted = false,
                            OemPartNumber = "oemtest12"
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7420),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7421),
                            IsDeleted = false,
                            OemPartNumber = "oemtest13"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the entry");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the entry: Active/Inactive");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Additional info for the current order");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.Property<int?>("PartId1")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity delivered of the current part");

                    b.Property<int>("SuplierId")
                        .HasColumnType("int")
                        .HasComment("Id of the suplier for this delivary");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("PartId1");

                    b.HasIndex("SuplierId");

                    b.ToTable("PartOrders", t =>
                        {
                            t.HasComment("Table of all orders of parts in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7470),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7471),
                            IsDeleted = false,
                            Note = "text",
                            PartId = 1,
                            Quantity = 2,
                            SuplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7473),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7474),
                            IsDeleted = false,
                            Note = "text2",
                            PartId = 4,
                            Quantity = 2,
                            SuplierId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7476),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7477),
                            IsDeleted = false,
                            Note = "text2",
                            PartId = 7,
                            Quantity = 1,
                            SuplierId = 3
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Rate", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part who has the client rated");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the client who has rated the current part");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the order");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the order");

                    b.Property<DateTime?>("DateFinish")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the completion of the order");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the order");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the order deleted: Yes/No");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("The last rating for the part given by the client");

                    b.HasKey("PartId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("Rates", t =>
                        {
                            t.HasComment("Table of all the ratings for all the part in the database");
                        });

                    b.HasData(
                        new
                        {
                            PartId = 1,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 1,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 4
                        },
                        new
                        {
                            PartId = 1,
                            ClientId = "17ce735d-6713-4d0a-8fcb-e4a71ee86f6f",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 3
                        },
                        new
                        {
                            PartId = 2,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 2,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 4
                        },
                        new
                        {
                            PartId = 3,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 6
                        },
                        new
                        {
                            PartId = 3,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 4
                        },
                        new
                        {
                            PartId = 4,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 4
                        },
                        new
                        {
                            PartId = 4,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 3
                        },
                        new
                        {
                            PartId = 5,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 3
                        },
                        new
                        {
                            PartId = 5,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 6
                        },
                        new
                        {
                            PartId = 6,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 6
                        },
                        new
                        {
                            PartId = 6,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 6
                        },
                        new
                        {
                            PartId = 7,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 6
                        },
                        new
                        {
                            PartId = 7,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 8,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 9,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 9,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 10,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 10,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 11,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 11,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 3
                        },
                        new
                        {
                            PartId = 12,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 12,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 4
                        },
                        new
                        {
                            PartId = 13,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 4
                        },
                        new
                        {
                            PartId = 13,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 14,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 3
                        },
                        new
                        {
                            PartId = 14,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 15,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 4
                        },
                        new
                        {
                            PartId = 15,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 4
                        },
                        new
                        {
                            PartId = 16,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 3
                        },
                        new
                        {
                            PartId = 16,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            PartId = 17,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 3
                        },
                        new
                        {
                            PartId = 17,
                            ClientId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Rating = 2
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the status");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the status");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the status");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("State of the status: Active/Inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The name of the status");

                    b.HasKey("Id");

                    b.ToTable("Statuses", t =>
                        {
                            t.HasComment("Table with all the statuses for the orders");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7153),
                            IsDeleted = false,
                            Name = "Pending approval"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7161),
                            IsDeleted = false,
                            Name = "Approved order"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7162),
                            IsDeleted = false,
                            Name = "Frame management"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7164),
                            IsDeleted = false,
                            Name = "Wheel management"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7166),
                            IsDeleted = false,
                            Name = "Shift management"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7168),
                            IsDeleted = false,
                            Name = "Quality control"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7171),
                            IsDeleted = false,
                            Name = "Send order"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Suplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Main address of the suplier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The category name of the suplied part");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the main person for contact with the suplier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the entry");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Main email of the suplier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the entry: Active/Inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the firm");

                    b.Property<string>("PhoneNumeber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Main phone number of the supplier");

                    b.Property<string>("VATNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Unique VAT number of the suplier");

                    b.HasKey("Id");

                    b.ToTable("Supliers", t =>
                        {
                            t.HasComment("Table of all supliers in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Sofia, center",
                            CategoryName = "Frame",
                            ContactName = "Pesh Peshev",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7204),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7205),
                            Email = "text@test.bg",
                            IsDeleted = false,
                            Name = "X Ltd",
                            PhoneNumeber = "1234567890",
                            VATNumber = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Sofia, east",
                            CategoryName = "Wheel",
                            ContactName = "Pesho Peshev",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7209),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7210),
                            Email = "text2@test.bg",
                            IsDeleted = false,
                            Name = "XX Ltd",
                            PhoneNumeber = "1234567899",
                            VATNumber = "123456788"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sofia, west",
                            CategoryName = "Acsessories",
                            ContactName = "Ivan Peshev",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7215),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7216),
                            Email = "text3@test.bg",
                            IsDeleted = false,
                            Name = "XXX Ltd",
                            PhoneNumeber = "1234567897",
                            VATNumber = "123456787"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the town entry");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the town entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the town entry");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the town");

                    b.HasKey("Id");

                    b.ToTable("Towns", t =>
                        {
                            t.HasComment("Table of all towns registered in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7257),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7258),
                            IsDeleted = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7265),
                            IsDeleted = false,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7267),
                            IsDeleted = false,
                            Name = "Burgas"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.VATCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the category");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the category");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the last update of the category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the category: Active/Inactive");

                    b.Property<decimal>("VATPercent")
                        .HasColumnType("decimal(6,2)")
                        .HasComment("Current percent of the VAT for this category parts");

                    b.HasKey("Id");

                    b.ToTable("VATCategories", t =>
                        {
                            t.HasComment("Table of all vat categories in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7298),
                            DateUpdated = new DateTime(2023, 12, 13, 11, 39, 31, 927, DateTimeKind.Local).AddTicks(7299),
                            IsDeleted = false,
                            VATPercent = 20.00m
                        });
                });

            modelBuilder.Entity("CompatablePartPart", b =>
                {
                    b.Property<int>("CompatablePartsId")
                        .HasColumnType("int");

                    b.Property<int>("PartsId")
                        .HasColumnType("int");

                    b.HasKey("CompatablePartsId", "PartsId");

                    b.HasIndex("PartsId");

                    b.ToTable("CompatablePartPart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6ac1cb3c-2457-4aff-8fa2-c7052ebcea9e",
                            Name = "client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "f0d2cbfa-cdca-4936-9d85-f9a697d39f2b",
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "fa8f997a-4e15-475f-a028-87a9b6e6be56",
                            Name = "frameworker",
                            NormalizedName = "FRAMEWORKER"
                        },
                        new
                        {
                            Id = "a9618213-7ba0-48cf-81d4-00cd16910ec7",
                            Name = "wheelworker",
                            NormalizedName = "WHEELWORKER"
                        },
                        new
                        {
                            Id = "566110d3-06fe-4ca2-b34b-9334a842c88f",
                            Name = "accessoriesworker",
                            NormalizedName = "ACCESSORIESWORKER"
                        },
                        new
                        {
                            Id = "ac558b05-a97b-42c8-bd62-dbd33f36d795",
                            Name = "qualitycontrol",
                            NormalizedName = "QUALITYCONTROL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            RoleId = "6ac1cb3c-2457-4aff-8fa2-c7052ebcea9e"
                        },
                        new
                        {
                            UserId = "17ce735d-6713-4d0a-8fcb-e4a71ee86f6f",
                            RoleId = "6ac1cb3c-2457-4aff-8fa2-c7052ebcea9e"
                        },
                        new
                        {
                            UserId = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            RoleId = "6ac1cb3c-2457-4aff-8fa2-c7052ebcea9e"
                        },
                        new
                        {
                            UserId = "406e8cf1-acaa-44a8-afec-585ff64bed34",
                            RoleId = "f0d2cbfa-cdca-4936-9d85-f9a697d39f2b"
                        },
                        new
                        {
                            UserId = "21003785-a275-4139-ae20-af6a6cf8fea8",
                            RoleId = "fa8f997a-4e15-475f-a028-87a9b6e6be56"
                        },
                        new
                        {
                            UserId = "17063948-8fdc-417e-8fb7-2ae6bf572f94",
                            RoleId = "a9618213-7ba0-48cf-81d4-00cd16910ec7"
                        },
                        new
                        {
                            UserId = "6af8468c-63f1-4bf2-8f88-e24b3f7a8f91",
                            RoleId = "566110d3-06fe-4ca2-b34b-9334a842c88f"
                        },
                        new
                        {
                            UserId = "29f06920-d2ad-43d8-b362-e2b94d7a7502",
                            RoleId = "ac558b05-a97b-42c8-bd62-dbd33f36d795"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.BaseUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the account");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the account");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of account data");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The first name of the user");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the account: Active/Inactive");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The last name of the user");

                    b.HasDiscriminator().HasValue("BaseUser");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Client", b =>
                {
                    b.HasBaseType("BicycleApp.Data.Models.IdentityModels.BaseUser");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the deposited money in this client account");

                    b.Property<string>("DelivaryAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The default address of the client for deliveries");

                    b.Property<string>("IBAN")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("IBAN of the client");

                    b.Property<int>("TownId")
                        .HasColumnType("int")
                        .HasComment("The Id of the default town for this client");

                    b.HasIndex("TownId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Id = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9edd2f0-82db-47c9-9ac6-3657b7e7e392",
                            Email = "client@test.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@TEST.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEKHyyvfTEO6qDiX1mh33bwhETU1EYJakSLWwQcImbWbDJn7GhZ5Ki1qhdgB8KhDZYQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "CLIENT@TEST.BG",
                            TwoFactorEnabled = false,
                            UserName = "client@test.bg",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 399, DateTimeKind.Local).AddTicks(8405),
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            Balance = 1000.00m,
                            DelivaryAddress = "Mladost 1, bl 20",
                            IBAN = "BG0012345678910111212",
                            TownId = 1
                        },
                        new
                        {
                            Id = "17ce735d-6713-4d0a-8fcb-e4a71ee86f6f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62272e82-0389-4b8c-bc9f-a9367aede5e7",
                            Email = "joro@test.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JORO@TEST.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEE6jyqWUZbNOjt5EZDHdDp0cZkfA+G8y0iLiWKzNhE1nsrJrXb2/BjtywJKlWDKElA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JORO@TEST.BG",
                            TwoFactorEnabled = false,
                            UserName = "joro@test.bg",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 466, DateTimeKind.Local).AddTicks(7591),
                            FirstName = "Georgi",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            Balance = 50.00m,
                            DelivaryAddress = "Mladost 1, bl 20",
                            IBAN = "BG0012345678910111212",
                            TownId = 2
                        },
                        new
                        {
                            Id = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8cec300f-ca1c-48b0-88d1-b57dd067f0a5",
                            Email = "powerranger@test.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "POWERRANGER@TEST.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEL/Ki/zgvCYhPJ6OAUOGhweahIvPo4HG903MLGdL9yvOWoP7C2A1xsRvf9a2waI+FA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "POWERRANGER@TEST.BG",
                            TwoFactorEnabled = false,
                            UserName = "powerranger@test.bg",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 533, DateTimeKind.Local).AddTicks(404),
                            FirstName = "Dimityr",
                            IsDeleted = false,
                            LastName = "Dimitrov",
                            Balance = 1246.00m,
                            DelivaryAddress = "Mladost 1, bl 20",
                            IBAN = "BG0012345678910111212",
                            TownId = 3
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Employee", b =>
                {
                    b.HasBaseType("BicycleApp.Data.Models.IdentityModels.BaseUser");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2")
                        .HasComment("Date of hire of the employee");

                    b.Property<DateTime?>("DateOfLeave")
                        .HasColumnType("datetime2")
                        .HasComment("Date of termination of the employee");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasComment("Id of the current department of the employee");

                    b.Property<bool>("IsManeger")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Current position of the employee in the company");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Employee");

                    b.HasData(
                        new
                        {
                            Id = "406e8cf1-acaa-44a8-afec-585ff64bed34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8f3861b-6eba-4596-8a4f-5c4f79bbaf9f",
                            Email = "manager@b-free.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJlIc6XGlkXsgxRBOF2OIrsaxBl/x8uI0KfGLTnqWVBKY7CqhvSGJfxJnDdAX0mQRA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "MANAGER@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "manager@b-free.com",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 598, DateTimeKind.Local).AddTicks(8815),
                            FirstName = "Kalin",
                            IsDeleted = false,
                            LastName = "Kalinov",
                            DateOfHire = new DateTime(2023, 12, 13, 11, 39, 31, 598, DateTimeKind.Local).AddTicks(8733),
                            DepartmentId = 1,
                            IsManeger = true,
                            Position = "manager"
                        },
                        new
                        {
                            Id = "21003785-a275-4139-ae20-af6a6cf8fea8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d977e39e-e262-4f8b-aa9b-83c94e028665",
                            Email = "marinov@b-free.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARINOV@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2pgUo07uKCfKzcRaRDSYcM1P0/EhYjuV3UepzEgHOV1sQvjKo13rqhcGFlhONYJA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "MARINOV@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "marinov@b-free.com",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 664, DateTimeKind.Local).AddTicks(1513),
                            FirstName = "Marin",
                            IsDeleted = false,
                            LastName = "Marinov",
                            DateOfHire = new DateTime(2023, 12, 13, 11, 39, 31, 664, DateTimeKind.Local).AddTicks(1483),
                            DepartmentId = 2,
                            IsManeger = false,
                            Position = "FrameWorker"
                        },
                        new
                        {
                            Id = "17063948-8fdc-417e-8fb7-2ae6bf572f94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5bd1052-26eb-4174-925f-726a29be559e",
                            Email = "todorov@b-free.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TODOROV@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF7kegBC5GGjhrWftY7Pflw8e+yfs8ErgHD3zC87+KYveLl5G5wRzt6vOIVQ8INmpg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "TODOROV@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "todorov@b-free.com",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 729, DateTimeKind.Local).AddTicks(3805),
                            FirstName = "Todor",
                            IsDeleted = false,
                            LastName = "Todorov",
                            DateOfHire = new DateTime(2023, 12, 13, 11, 39, 31, 729, DateTimeKind.Local).AddTicks(3783),
                            DepartmentId = 2,
                            IsManeger = false,
                            Position = "Wheelworker"
                        },
                        new
                        {
                            Id = "6af8468c-63f1-4bf2-8f88-e24b3f7a8f91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7dd68772-8c5b-440e-bfa0-07980babef1a",
                            Email = "ivanov@b-free.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOV@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECvtjt+11CJ7xCul3nZ2cLiJjbbav5+VQOh0ETUbk8YgBSlz23nQKQmBVDnsuZvAYQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "IVANOV@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "ivanov@b-free.com",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 795, DateTimeKind.Local).AddTicks(6681),
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            DateOfHire = new DateTime(2023, 12, 13, 11, 39, 31, 795, DateTimeKind.Local).AddTicks(6656),
                            DepartmentId = 2,
                            IsManeger = false,
                            Position = "Accessoriesworker"
                        },
                        new
                        {
                            Id = "29f06920-d2ad-43d8-b362-e2b94d7a7502",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e10fa96d-ccab-41fa-bfa5-27b5ad5afb43",
                            Email = "atanasov@b-free.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ATANASOV@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOdKRq8NIcqA63doQJxxfhpUFBDPB+jYg5PfX5YMf0oWf2fxfMYbsn5ORJSK0ncVIA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ATANASOV@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "atanasov@b-free.com",
                            DateCreated = new DateTime(2023, 12, 13, 11, 39, 31, 860, DateTimeKind.Local).AddTicks(9901),
                            FirstName = "Atanas",
                            IsDeleted = false,
                            LastName = "Atanasov",
                            DateOfHire = new DateTime(2023, 12, 13, 11, 39, 31, 860, DateTimeKind.Local).AddTicks(9875),
                            DepartmentId = 2,
                            IsManeger = false,
                            Position = "Qualitycontrol"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.BikeModelPart", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.BikeStandartModel", "BikeModel")
                        .WithMany("BikeModelsParts")
                        .HasForeignKey("BikeModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("BikeModelsParts")
                        .HasForeignKey("BikeModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BikeModel");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Comment", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Client", "Client")
                        .WithMany("Comments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("Comments")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Delivary", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("Delivaries")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Suplier", "Suplier")
                        .WithMany("Delivaries")
                        .HasForeignKey("SuplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Suplier");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImageClient", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Client", "Client")
                        .WithMany("Images")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImageEmployee", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", "Employee")
                        .WithMany("ImagesEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImagePart", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("ImagesParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Order", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.OrderPartEmployee", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", "Employee")
                        .WithMany("OrdersPartsEmployees")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Order", "Order")
                        .WithMany("OrdersPartsEmployees")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("OrdersPartsEmployees")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Order");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.OrderPartEmployeeInfo", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.OrderPartEmployee", "OrderPartEmployee")
                        .WithMany("OrdersPartsEmployeesInfos")
                        .HasForeignKey("OrderId", "PartId", "UniqueKeyForSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderPartEmployee");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Part", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.PartCategory", "Category")
                        .WithMany("Parts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.VATCategory", "VATCategory")
                        .WithMany("Parts")
                        .HasForeignKey("VATCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("VATCategory");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartInStock", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Suplier", null)
                        .WithMany("PartsInStock")
                        .HasForeignKey("SuplierId");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartOrder", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", null)
                        .WithMany("PartsInOrder")
                        .HasForeignKey("PartId1");

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Suplier", "Suplier")
                        .WithMany("PartsInOrder")
                        .HasForeignKey("SuplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Suplier");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Rate", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Client", "Client")
                        .WithMany("Rates")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("Rates")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("CompatablePartPart", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.CompatablePart", null)
                        .WithMany()
                        .HasForeignKey("CompatablePartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", null)
                        .WithMany()
                        .HasForeignKey("PartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Client", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Town", "Town")
                        .WithMany("Clients")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Employee", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.BikeStandartModel", b =>
                {
                    b.Navigation("BikeModelsParts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Order", b =>
                {
                    b.Navigation("OrdersPartsEmployees");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.OrderPartEmployee", b =>
                {
                    b.Navigation("OrdersPartsEmployeesInfos");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Part", b =>
                {
                    b.Navigation("BikeModelsParts");

                    b.Navigation("Comments");

                    b.Navigation("Delivaries");

                    b.Navigation("ImagesParts");

                    b.Navigation("OrdersPartsEmployees");

                    b.Navigation("PartsInOrder");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartCategory", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Status", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Suplier", b =>
                {
                    b.Navigation("Delivaries");

                    b.Navigation("PartsInOrder");

                    b.Navigation("PartsInStock");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Town", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.VATCategory", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Client", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Orders");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Employee", b =>
                {
                    b.Navigation("ImagesEmployees");

                    b.Navigation("OrdersPartsEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
