// <auto-generated />
using System;
using BicycleApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BicycleApp.Data.Migrations
{
    [DbContext(typeof(BicycleAppDbContext))]
    [Migration("20231118124432_CreateAnDSeed")]
    partial class CreateAnDSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.BikeModelPart", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("BikeModelId")
                        .HasColumnType("int");

                    b.HasKey("PartId", "BikeModelId");

                    b.HasIndex("BikeModelId");

                    b.ToTable("BikeModelsParts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.BikeStandartModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of standart bike.");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("BikesStandartModels");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the comment");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the comment");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Description of the comment");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Title of the comment");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PartId");

                    b.ToTable("Comments", t =>
                        {
                            t.HasComment("Table of all comments for all parts in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7042),
                            DateUpdated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7067),
                            Description = "Test Description",
                            PartId = 1,
                            Title = "Test Title"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Delivary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateDelivered")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the entry");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Additional info for the current delivary");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.Property<double>("QuantityDelivered")
                        .HasColumnType("float(2)")
                        .HasComment("Quantity delivered of the current part");

                    b.Property<int>("SuplierId")
                        .HasColumnType("int")
                        .HasComment("Id of the suplier for this delivary");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("SuplierId");

                    b.ToTable("Delivaries", t =>
                        {
                            t.HasComment("Table of all delivaries of all parts in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateDelivered = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7146),
                            DateUpdated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7147),
                            Note = "text",
                            PartId = 1,
                            QuantityDelivered = 2.0,
                            SuplierId = 1
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entity");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of deletion of the entity");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the last update of the entity");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the department: Active/Inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the department");

                    b.HasKey("Id");

                    b.ToTable("Departments", t =>
                        {
                            t.HasComment("Table of all departments in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7215),
                            IsDeleted = false,
                            Name = "Administration"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7225),
                            IsDeleted = false,
                            Name = "Workshop"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImageClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the client");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the image");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url of the image");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ImagesClients", t =>
                        {
                            t.HasComment("Table with the location of all images of all clients in tha database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            ImageName = "image",
                            ImageUrl = "test"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImageEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the client");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the image");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url of the image");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ImagesEmployees", t =>
                        {
                            t.HasComment("Table with the location of all images of all employees in tha database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = "21003785-a275-4139-ae20-af6a6cf8fea8",
                            ImageName = "image",
                            ImageUrl = "test"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImagePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the image");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url of the image");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("ImagesParts", t =>
                        {
                            t.HasComment("Table with the location of all images of all parts in tha database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageName = "image",
                            ImageUrl = "test",
                            PartId = 1
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the client of this order");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the order");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the order");

                    b.Property<DateTime?>("DateFinish")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the completion of the order");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the order");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("All information of the ordered parts from the client, as a string");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the discoint");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The final amount of the order after discount and tax");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Is the order deleted: Yes/No");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount paid from this order");

                    b.Property<decimal>("SaleAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the order before discount and tax");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasComment("Unique serial number of the order");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasComment("Id of the current status of the order");

                    b.Property<decimal>("UnpaidAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount not paid from this order");

                    b.Property<decimal>("VAT")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the VAT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("Table of all orders from clients in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7400),
                            Description = "",
                            Discount = 0m,
                            FinalAmount = 750.00m,
                            IsDeleted = false,
                            PaidAmount = 0m,
                            SaleAmount = 625.00m,
                            SerialNumber = "BID12345678",
                            StatusId = 1,
                            UnpaidAmount = 750.00m,
                            VAT = 125.00m
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.OrderPartEmployee", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("Id of the order from the client");

                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part");

                    b.Property<DateTime?>("DatetimeAsigned")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of asigned task to the employee");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description of the task");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the emplyee asigned to this order");

                    b.Property<DateTime?>("EndDatetime")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of finish of the task from the employee");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the task: Completed/Not completed");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the part");

                    b.Property<decimal>("PartPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the part");

                    b.Property<double>("PartQuantity")
                        .HasColumnType("float(2)")
                        .HasComment("Quantity of the part");

                    b.Property<DateTime?>("StartDatetime")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of start of the task from the employee");

                    b.HasKey("OrderId", "PartId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PartId");

                    b.ToTable("OrdersPartsEmployees", t =>
                        {
                            t.HasComment("Table conecting all the parts in an order with the employee responsible for the mounting");
                        });

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            PartId = 1,
                            DatetimeAsigned = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7452),
                            Description = "test",
                            EmployeeId = "21003785-a275-4139-ae20-af6a6cf8fea8",
                            IsCompleted = false,
                            PartName = "Frame OG",
                            PartPrice = 100.00m,
                            PartQuantity = 1.0
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Id of the category of the part");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry in tha database");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the entry from the database");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the last update of the entry in the database");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Full description of the part");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the part: Deleted/Not deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the part");

                    b.Property<string>("OEMNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Unique number of the part from the manifacturer");

                    b.Property<double>("Quantity")
                        .HasColumnType("float(2)")
                        .HasComment("Current quantity of the part in the database");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Sale price of the part before VAT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Measuring unit of the part");

                    b.Property<int>("VATCategoryId")
                        .HasColumnType("int")
                        .HasComment("Id of the current vat category of the part");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VATCategoryId");

                    b.ToTable("Parts", t =>
                        {
                            t.HasComment("Table of all the parts in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7520),
                            Description = "Best frame in the world!",
                            IsDeleted = false,
                            Name = "Frame OG",
                            OEMNumber = "oemtest",
                            Quantity = 3.0,
                            SalePrice = 100.00m,
                            Unit = "count",
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7584),
                            Description = "Best wheels ever!",
                            IsDeleted = false,
                            Name = "Wheel of the Year",
                            OEMNumber = "oemtest",
                            Quantity = 50.0,
                            SalePrice = 75.00m,
                            Unit = "count",
                            VATCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7590),
                            Description = "Worst shift - have only one!",
                            IsDeleted = false,
                            Name = "Shift",
                            OEMNumber = "oemtest",
                            Quantity = 9.0,
                            SalePrice = 250.00m,
                            Unit = "count",
                            VATCategoryId = 1
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the category");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the category");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the category");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url of the general image for this category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the category: Active/Inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the category");

                    b.HasKey("Id");

                    b.ToTable("PartCategories", t =>
                        {
                            t.HasComment("Table of all categories for a part in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7629),
                            ImageUrl = "test",
                            IsDeleted = false,
                            Name = "Frame"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7639),
                            ImageUrl = "test",
                            IsDeleted = false,
                            Name = "Wheel"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7642),
                            ImageUrl = "test",
                            IsDeleted = false,
                            Name = "Shift"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Rate", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasComment("Id of the part who has the client rated");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the client who has rated the current part");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("The last rating for the part given by the client");

                    b.HasKey("PartId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("Rates", t =>
                        {
                            t.HasComment("Table of all the ratings for all the part in the database");
                        });

                    b.HasData(
                        new
                        {
                            PartId = 1,
                            ClientId = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            Rating = 5
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the status");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the status");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the status");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("State of the status: Active/Inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The name of the status");

                    b.HasKey("Id");

                    b.ToTable("Statuses", t =>
                        {
                            t.HasComment("Table with all the statuses for the orders");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7807),
                            IsDeleted = false,
                            Name = "Pending approval"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7816),
                            IsDeleted = false,
                            Name = "Approved order"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7820),
                            IsDeleted = false,
                            Name = "Frame management"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7824),
                            IsDeleted = false,
                            Name = "Wheel management"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7845),
                            IsDeleted = false,
                            Name = "Shift management"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7850),
                            IsDeleted = false,
                            Name = "Quality control"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7854),
                            IsDeleted = false,
                            Name = "Send order"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Suplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Main address of the suplier");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the main person for contact with the suplier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the entry");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the entry");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Main email of the suplier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the entry: Active/Inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the firm");

                    b.Property<string>("PhoneNumeber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Main phone number of the supplier");

                    b.Property<string>("VATNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Unique VAT number of the suplier");

                    b.HasKey("Id");

                    b.ToTable("Supliers", t =>
                        {
                            t.HasComment("Table of all supliers in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Sofia, center",
                            ContactName = "Pesh Peshev",
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7928),
                            DateUpdated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7930),
                            Email = "text@test.bg",
                            IsDeleted = false,
                            Name = "X Ltd",
                            PhoneNumeber = "1234567890",
                            VATNumber = "123456789"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the town entry");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the town entry");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of the town entry");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the town");

                    b.HasKey("Id");

                    b.ToTable("Towns", t =>
                        {
                            t.HasComment("Table of all towns registered in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7981),
                            DateUpdated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7983),
                            IsDeleted = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7992),
                            IsDeleted = false,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(7996),
                            IsDeleted = false,
                            Name = "Burgas"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.VATCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the category");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the category");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the last update of the category");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the category: Active/Inactive");

                    b.Property<decimal>("VATPercent")
                        .HasColumnType("decimal(6,2)")
                        .HasComment("Current percent of the VAT for this category parts");

                    b.HasKey("Id");

                    b.ToTable("VATCategories", t =>
                        {
                            t.HasComment("Table of all vat categories in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(8033),
                            DateUpdated = new DateTime(2023, 11, 18, 14, 44, 31, 908, DateTimeKind.Local).AddTicks(8035),
                            IsDeleted = false,
                            VATPercent = 20.00m
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the deposited money in this client account");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the account");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the deletion of the account");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of account data");

                    b.Property<string>("DelivaryAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The default address of the client for deliveries");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The first name of the client");

                    b.Property<string>("IBAN")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("IBAN of the client");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the account: Active/Inactive");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The last name of the client");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TownId")
                        .HasColumnType("int")
                        .HasComment("The Id of the default town for this client");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Clients", t =>
                        {
                            t.HasComment("Table of all clients registered in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = "ae0da70f-6e0b-4ef8-85a2-0c5cccd4b4fd",
                            AccessFailedCount = 0,
                            Balance = 1000.00m,
                            ConcurrencyStamp = "cd2ace25-975e-4cce-ad9a-8dd778e115f7",
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 131, DateTimeKind.Local).AddTicks(6634),
                            DelivaryAddress = "Mladost 1, bl 20",
                            Email = "client@test.bg",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IBAN = "BG0012345678910111212",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@TEST.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEKPTUcRtXZgXcYEeAkVXbWczKeUB1fkAWd6kZFzshVastTq3/E14/bFMFJGR3C8n3A==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "CLIENT@TEST.BG",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "client@test.bg"
                        },
                        new
                        {
                            Id = "17ce735d-6713-4d0a-8fcb-e4a71ee86f6f",
                            AccessFailedCount = 0,
                            Balance = 50.00m,
                            ConcurrencyStamp = "7f590e59-19de-4c44-a5c5-7279ab8ae481",
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 228, DateTimeKind.Local).AddTicks(7889),
                            DelivaryAddress = "Mladost 1, bl 20",
                            Email = "joro@test.bg",
                            EmailConfirmed = false,
                            FirstName = "Georgi",
                            IBAN = "BG0012345678910111212",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "JORO@TEST.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAECf+VwDpRCMMZpQFI/bVWWJpLP+Xz97iEA6C2NSOUyXP4tTl09UOrgzAElMVIOfSAA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JORO@TEST.BG",
                            TownId = 2,
                            TwoFactorEnabled = false,
                            UserName = "joro@test.bg"
                        },
                        new
                        {
                            Id = "99d3ca6f-2067-4316-a5d7-934c93789521",
                            AccessFailedCount = 0,
                            Balance = 1246.00m,
                            ConcurrencyStamp = "d4685364-4cc0-4392-bbc3-ddd967555f7c",
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 313, DateTimeKind.Local).AddTicks(5352),
                            DelivaryAddress = "Mladost 1, bl 20",
                            Email = "powerranger@test.bg",
                            EmailConfirmed = false,
                            FirstName = "Dimityr",
                            IBAN = "BG0012345678910111212",
                            IsDeleted = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "POWERRANGER@TEST.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEK8L0aHsxhOsFFX+juPSFQgGviUPAuS6aVvvJniD8fO/RuWtiN5HhXybL6tGAq577A==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "POWERRANGER@TEST.BG",
                            TownId = 3,
                            TwoFactorEnabled = false,
                            UserName = "powerranger@test.bg"
                        });
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the account");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2")
                        .HasComment("Date of hire of the employee");

                    b.Property<DateTime?>("DateOfLeave")
                        .HasColumnType("datetime2")
                        .HasComment("Date of termination of the employee");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last update of account data");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasComment("Id of the current department of the employee");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Email of the employee");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The first name of the employee");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Status of the account: Active/Inactive");

                    b.Property<bool>("IsManeger")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The last name of the employee");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Phone number of the employee");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Current position of the employee in the company");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("Table of all employees registered in the database");
                        });

                    b.HasData(
                        new
                        {
                            Id = "406e8cf1-acaa-44a8-afec-585ff64bed34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8adf0a83-3ee2-4aae-8a7c-28283c464b3a",
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 411, DateTimeKind.Local).AddTicks(240),
                            DateOfHire = new DateTime(2023, 11, 18, 14, 44, 31, 411, DateTimeKind.Local).AddTicks(142),
                            DepartmentId = 1,
                            Email = "manager@b-free.com",
                            EmailConfirmed = false,
                            FirstName = "Kalin",
                            IsDeleted = false,
                            IsManeger = true,
                            LastName = "Kalinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIYAR/pdmBpW7LkBBdhOPNCKauUMjWMoLHqILOrBh2wd20+tI6z7rARF2O8vfW1QRg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Position = "manager",
                            SecurityStamp = "MANAGER@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "manager@b-free.com"
                        },
                        new
                        {
                            Id = "21003785-a275-4139-ae20-af6a6cf8fea8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89bf5703-800c-48ba-bcb2-3fbfe75e3fea",
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 496, DateTimeKind.Local).AddTicks(8140),
                            DateOfHire = new DateTime(2023, 11, 18, 14, 44, 31, 496, DateTimeKind.Local).AddTicks(8052),
                            DepartmentId = 2,
                            Email = "marinov@b-free.com",
                            EmailConfirmed = false,
                            FirstName = "Marin",
                            IsDeleted = false,
                            IsManeger = false,
                            LastName = "Marinov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARINOV@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENKd0NeNi3tP7jr5bCYfzK6liqw5WJ5jHLoGlWm5HSbsHq5oESk6mB4C5eOSpPBYkg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Position = "FrameWorker",
                            SecurityStamp = "MARINOV@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "marinov@b-free.com"
                        },
                        new
                        {
                            Id = "17063948-8fdc-417e-8fb7-2ae6bf572f94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc14565d-a9a2-47cb-b6f5-d6176f887727",
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 623, DateTimeKind.Local).AddTicks(2932),
                            DateOfHire = new DateTime(2023, 11, 18, 14, 44, 31, 623, DateTimeKind.Local).AddTicks(2903),
                            DepartmentId = 2,
                            Email = "todorov@b-free.com",
                            EmailConfirmed = false,
                            FirstName = "Todor",
                            IsDeleted = false,
                            IsManeger = false,
                            LastName = "Todorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "TODOROV@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGjPWbdJViEg4E8e9Hx0Yrw8BVkCfJegLkA2vkPiDNmgpOQ+EQLjC58/z9X9p62aSQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Position = "Wheelworker",
                            SecurityStamp = "TODOROV@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "todorov@b-free.com"
                        },
                        new
                        {
                            Id = "6af8468c-63f1-4bf2-8f88-e24b3f7a8f91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89fc96f4-1adb-42ad-b158-236bb446e31d",
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 716, DateTimeKind.Local).AddTicks(9956),
                            DateOfHire = new DateTime(2023, 11, 18, 14, 44, 31, 716, DateTimeKind.Local).AddTicks(9923),
                            DepartmentId = 2,
                            Email = "ivanov@b-free.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IsDeleted = false,
                            IsManeger = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOV@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAcoDRsw0A7WNHEBl70Oar3tJuwpyrwMVy2Z/cZeMGT0alXZyRxNTDqP1Hjq4mJeVQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Position = "Accessoriesworker",
                            SecurityStamp = "IVANOV@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "ivanov@b-free.com"
                        },
                        new
                        {
                            Id = "29f06920-d2ad-43d8-b362-e2b94d7a7502",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "036790e6-f909-421a-ad1f-8b99a794b88c",
                            DateCreated = new DateTime(2023, 11, 18, 14, 44, 31, 812, DateTimeKind.Local).AddTicks(7694),
                            DateOfHire = new DateTime(2023, 11, 18, 14, 44, 31, 812, DateTimeKind.Local).AddTicks(7668),
                            DepartmentId = 2,
                            Email = "atanasov@b-free.com",
                            EmailConfirmed = false,
                            FirstName = "Atanas",
                            IsDeleted = false,
                            IsManeger = false,
                            LastName = "Atanasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ATANASOV@B-FREE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGTC4duCU2qYVOuJqJuy2JUL6RTY2V5NZZhPldvN3haXSGnlve/QnqRlLopvm7Q5Ew==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Position = "Qualitycontrol",
                            SecurityStamp = "ATANASOV@B-FREE.COM",
                            TwoFactorEnabled = false,
                            UserName = "atanasov@b-free.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.BikeModelPart", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.BikeStandartModel", "BikeModel")
                        .WithMany("BikeModelsParts")
                        .HasForeignKey("BikeModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("BikeModelsParts")
                        .HasForeignKey("BikeModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BikeModel");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Comment", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Client", "Client")
                        .WithMany("Comments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("Comments")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Delivary", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("Delivaries")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Suplier", "Suplier")
                        .WithMany("Delivaries")
                        .HasForeignKey("SuplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Suplier");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImageClient", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Client", "Client")
                        .WithMany("Images")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImageEmployee", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", "Employee")
                        .WithMany("ImagesEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.ImagePart", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("ImagesParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Order", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.OrderPartEmployee", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", "Employee")
                        .WithMany("OrdersPartsEmployees")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Order", "Order")
                        .WithMany("OrdersPartsEmployees")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("OrdersPartsEmployees")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Order");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Part", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.PartCategory", "Category")
                        .WithMany("Parts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.VATCategory", "VATCategory")
                        .WithMany("Parts")
                        .HasForeignKey("VATCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("VATCategory");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Rate", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Client", "Client")
                        .WithMany("Rates")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.EntityModels.Part", "Part")
                        .WithMany("Rates")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Client", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Town", "Town")
                        .WithMany("Clients")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Employee", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.EntityModels.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BicycleApp.Data.Models.IdentityModels.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.BikeStandartModel", b =>
                {
                    b.Navigation("BikeModelsParts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Order", b =>
                {
                    b.Navigation("OrdersPartsEmployees");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Part", b =>
                {
                    b.Navigation("BikeModelsParts");

                    b.Navigation("Comments");

                    b.Navigation("Delivaries");

                    b.Navigation("ImagesParts");

                    b.Navigation("OrdersPartsEmployees");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.PartCategory", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Status", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Suplier", b =>
                {
                    b.Navigation("Delivaries");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.Town", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.EntityModels.VATCategory", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Client", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Orders");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("BicycleApp.Data.Models.IdentityModels.Employee", b =>
                {
                    b.Navigation("ImagesEmployees");

                    b.Navigation("OrdersPartsEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
